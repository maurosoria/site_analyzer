# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import site_analyzer_pb2 as site__analyzer__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in site_analyzer_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SiteAnalyzerStub(object):
    """SiteAnalyzer service definition
    Provides comprehensive website analysis and enumeration capabilities
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Analyze = channel.unary_unary(
                '/site_analyzer.SiteAnalyzer/Analyze',
                request_serializer=site__analyzer__pb2.AnalyzeRequest.SerializeToString,
                response_deserializer=site__analyzer__pb2.AnalyzeResponse.FromString,
                _registered_method=True)
        self.GetScanResult = channel.unary_unary(
                '/site_analyzer.SiteAnalyzer/GetScanResult',
                request_serializer=site__analyzer__pb2.GetScanResultRequest.SerializeToString,
                response_deserializer=site__analyzer__pb2.ScanResult.FromString,
                _registered_method=True)
        self.ListScans = channel.unary_unary(
                '/site_analyzer.SiteAnalyzer/ListScans',
                request_serializer=site__analyzer__pb2.ListScansRequest.SerializeToString,
                response_deserializer=site__analyzer__pb2.ListScansResponse.FromString,
                _registered_method=True)
        self.DeleteScan = channel.unary_unary(
                '/site_analyzer.SiteAnalyzer/DeleteScan',
                request_serializer=site__analyzer__pb2.DeleteScanRequest.SerializeToString,
                response_deserializer=site__analyzer__pb2.DeleteScanResponse.FromString,
                _registered_method=True)
        self.GetEnumerators = channel.unary_unary(
                '/site_analyzer.SiteAnalyzer/GetEnumerators',
                request_serializer=site__analyzer__pb2.GetEnumeratorsRequest.SerializeToString,
                response_deserializer=site__analyzer__pb2.GetEnumeratorsResponse.FromString,
                _registered_method=True)
        self.GetStorageTypes = channel.unary_unary(
                '/site_analyzer.SiteAnalyzer/GetStorageTypes',
                request_serializer=site__analyzer__pb2.GetStorageTypesRequest.SerializeToString,
                response_deserializer=site__analyzer__pb2.GetStorageTypesResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/site_analyzer.SiteAnalyzer/HealthCheck',
                request_serializer=site__analyzer__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=site__analyzer__pb2.HealthCheckResponse.FromString,
                _registered_method=True)
        self.StreamScanProgress = channel.unary_stream(
                '/site_analyzer.SiteAnalyzer/StreamScanProgress',
                request_serializer=site__analyzer__pb2.StreamScanProgressRequest.SerializeToString,
                response_deserializer=site__analyzer__pb2.ScanProgressUpdate.FromString,
                _registered_method=True)


class SiteAnalyzerServicer(object):
    """SiteAnalyzer service definition
    Provides comprehensive website analysis and enumeration capabilities
    """

    def Analyze(self, request, context):
        """Analyze a target website
        Performs comprehensive analysis including web scanning, DNS enumeration, and security assessment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetScanResult(self, request, context):
        """Get scan result by ID
        Retrieves detailed results of a previously completed scan
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListScans(self, request, context):
        """List recent scans
        Returns a paginated list of recent scan summaries
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteScan(self, request, context):
        """Delete scan result
        Removes a scan result from storage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEnumerators(self, request, context):
        """Get available enumerators
        Returns list of available enumeration strategies
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStorageTypes(self, request, context):
        """Get storage types
        Returns list of available storage backends
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        Returns service health status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamScanProgress(self, request, context):
        """Stream scan progress
        Provides real-time updates on scan progress
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SiteAnalyzerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Analyze': grpc.unary_unary_rpc_method_handler(
                    servicer.Analyze,
                    request_deserializer=site__analyzer__pb2.AnalyzeRequest.FromString,
                    response_serializer=site__analyzer__pb2.AnalyzeResponse.SerializeToString,
            ),
            'GetScanResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetScanResult,
                    request_deserializer=site__analyzer__pb2.GetScanResultRequest.FromString,
                    response_serializer=site__analyzer__pb2.ScanResult.SerializeToString,
            ),
            'ListScans': grpc.unary_unary_rpc_method_handler(
                    servicer.ListScans,
                    request_deserializer=site__analyzer__pb2.ListScansRequest.FromString,
                    response_serializer=site__analyzer__pb2.ListScansResponse.SerializeToString,
            ),
            'DeleteScan': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteScan,
                    request_deserializer=site__analyzer__pb2.DeleteScanRequest.FromString,
                    response_serializer=site__analyzer__pb2.DeleteScanResponse.SerializeToString,
            ),
            'GetEnumerators': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEnumerators,
                    request_deserializer=site__analyzer__pb2.GetEnumeratorsRequest.FromString,
                    response_serializer=site__analyzer__pb2.GetEnumeratorsResponse.SerializeToString,
            ),
            'GetStorageTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStorageTypes,
                    request_deserializer=site__analyzer__pb2.GetStorageTypesRequest.FromString,
                    response_serializer=site__analyzer__pb2.GetStorageTypesResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=site__analyzer__pb2.HealthCheckRequest.FromString,
                    response_serializer=site__analyzer__pb2.HealthCheckResponse.SerializeToString,
            ),
            'StreamScanProgress': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamScanProgress,
                    request_deserializer=site__analyzer__pb2.StreamScanProgressRequest.FromString,
                    response_serializer=site__analyzer__pb2.ScanProgressUpdate.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'site_analyzer.SiteAnalyzer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('site_analyzer.SiteAnalyzer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SiteAnalyzer(object):
    """SiteAnalyzer service definition
    Provides comprehensive website analysis and enumeration capabilities
    """

    @staticmethod
    def Analyze(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/site_analyzer.SiteAnalyzer/Analyze',
            site__analyzer__pb2.AnalyzeRequest.SerializeToString,
            site__analyzer__pb2.AnalyzeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetScanResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/site_analyzer.SiteAnalyzer/GetScanResult',
            site__analyzer__pb2.GetScanResultRequest.SerializeToString,
            site__analyzer__pb2.ScanResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListScans(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/site_analyzer.SiteAnalyzer/ListScans',
            site__analyzer__pb2.ListScansRequest.SerializeToString,
            site__analyzer__pb2.ListScansResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteScan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/site_analyzer.SiteAnalyzer/DeleteScan',
            site__analyzer__pb2.DeleteScanRequest.SerializeToString,
            site__analyzer__pb2.DeleteScanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEnumerators(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/site_analyzer.SiteAnalyzer/GetEnumerators',
            site__analyzer__pb2.GetEnumeratorsRequest.SerializeToString,
            site__analyzer__pb2.GetEnumeratorsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStorageTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/site_analyzer.SiteAnalyzer/GetStorageTypes',
            site__analyzer__pb2.GetStorageTypesRequest.SerializeToString,
            site__analyzer__pb2.GetStorageTypesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/site_analyzer.SiteAnalyzer/HealthCheck',
            site__analyzer__pb2.HealthCheckRequest.SerializeToString,
            site__analyzer__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamScanProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/site_analyzer.SiteAnalyzer/StreamScanProgress',
            site__analyzer__pb2.StreamScanProgressRequest.SerializeToString,
            site__analyzer__pb2.ScanProgressUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
